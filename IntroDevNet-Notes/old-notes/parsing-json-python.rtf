{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red244\green246\blue249;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c96471\c97255\c98039;}
\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 developer:parsing-json > python parsing_json.py\
json_text is a <class 'str'>\
\{\
    "ietf-interfaces:interface": \{\
        "name": "GigabitEthernet2",\
        "description": "Wide Area Network",\
        "enabled": true,\
        "ietf-ip:ipv4": \{\
            "address": [\
developer:parsing-json > exit()\
> python -i\
\
developer:parsing-json > python -i\
>>> import json\
>>> import os\
>>> from pprint import pprint\
\
>>> # Get the absolute path for the directory where this file is located "here"\
>>> here = os.path.abspath(os.path.dirname("interface-config.json"))\
\
>>> # Read in the JSON text\
>>> with open(os.path.join(here, "interface-config.json")) as file:\
...     	json_text = file.read()\
... \
>>> # Display the type of the json_text variable\
>>> print("json_text is a", type(json_text))\
json_text is a <class 'str'>\
\
>>> # Display the contents of the json_text variable\
>>> print(json_text)\
\{\
    "ietf-interfaces:interface": \{\
        "name": "GigabitEthernet2",\
        "description": "Wide Area Network",\
        "enabled": true,\
        "ietf-ip:ipv4": \{\
            "address": [\
                \{\
                    "ip": "172.16.0.2",\
                    "netmask": "255.255.255.0"\
                \}\
            ]\
        \}\
    \}\
\}\
\
>>> json_data = json.loads(json_text)\
\
>>> print("json_data is a", type(json_data))\
json_data is a <class 'dict'>\
\
# pretty print the json data\
>>> pprint(json_data)\
\{'ietf-interfaces:interface': \{'description': 'Wide Area Network',\
                               'enabled': True,\
                               'ietf-ip:ipv4': \{'address': [\{'ip': '172.16.0.2',\
                                                             'netmask': '255.255.255.0'\}]\},\
                               'name': 'GigabitEthernet2'\}\}\
\
>>> pprint(json_data["ietf-interfaces:interface"])\
\
\{'description': 'Wide Area Network',\
 'enabled': True,\
 'ietf-ip:ipv4': \{'address': [\{'ip': '172.16.0.2',\
                               'netmask': '255.255.255.0'\}]\},\
 'name': 'GigabitEthernet2'\}\
>>> \
>>> json_data["ietf-interfaces:interface"]["ietf-ip:ipv4"]["address"]\
\
[\{'ip': '172.16.0.2', 'netmask': '255.255.255.0'\}]\
>>> json_data["ietf-interfaces:interface"]["ietf-ip:ipv4"]["address"][0]["ip"]\
'172.16.0.2'\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
dc_inventory = \{"switches": 5, "routers": 2, "firewalls": 9\}\
for device, quantity in dc_inventory.items():\
    print("You have \{\} \{\}.".format(quantity, device))\
\
...\
You have 5 switches.\
You have 2 routers.\
You have 9 firewalls.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\
for interface in json_data["ietf-interfaces:interfaces"]["interface"]:\
    print(interface["name"])\
\
\
"""\
Here\'92s a demo program used for parsing JSON\
\'93\'94\'94\
\
\
import json\
import os\
\
\
# Get the absolute path for the directory where this file is located "here"\
here = os.path.abspath(os.path.dirname(__file__))\
\
\
with open(os.path.join(here, "interfaces.json"), 'r') as file:\
    json_text = file.read()    # TODO: Parse the contents of the JSON file into a variable\
\
json_data = json.loads(json_text)\
\
from pprint import pprint\
pprint(json_data)\
\
for interface in json_data["ietf-interfaces:interfaces"]["interface"]:\
    print(interface["name"]) \
    \
\
for ipaddr in json_data["ietf-interfaces:interfaces"]["interface"][0]["ietf-ip:ipv4"]["address"]:\
   # print(ipaddr[0]["ietfip:ipv4"])\
    print(ipaddr["ip"])}